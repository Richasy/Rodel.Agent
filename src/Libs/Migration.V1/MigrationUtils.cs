// <auto-generated />

using System.IO.Compression;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Richasy.AgentKernel;
using Richasy.AgentKernel.Models;
using RodelAgent.Interfaces;

namespace Migration.V1;

/// <summary>
/// 小幻助理 V1 迁移工具.
/// </summary>
public sealed class MigrationUtils
{
    private readonly string _workDir;
    private readonly string _secretDbPath;
    private readonly string _chatDbPath;
    private readonly string _drawDbPath;
    private readonly IStorageService _storageService;

    private ChatProviderType _preferChatProvider = ChatProviderType.OpenAI;

    /// <summary>
    /// Initializes a new instance of the <see cref="MigrationUtils"/> class.
    /// </summary>
    public MigrationUtils(string workDir, IStorageService storageService)
    {
        _workDir = workDir;
        _storageService = storageService;
        _secretDbPath = Path.Combine(workDir, "_secret_.db");
        _chatDbPath = Path.Combine(workDir, "chat.db");
        _drawDbPath = Path.Combine(workDir, "draw.db");
    }

    /// <summary>
    /// 迁移数据.
    /// </summary>
    /// <returns></returns>
    public async Task MigrateAsync()
    {
        var v2TempDir = Path.Combine(_workDir, "v2_temp");

        if (!Directory.Exists(v2TempDir))
        {
            await PackDataAsync();
            _storageService.SetWorkingDirectory(Path.Combine(_workDir, "v2_temp"));
            await MigrateSecretDataAsync();
            await MigrateChatDataAsync();
            await MigrateDrawDataAsync();
        }
        else
        {
            await CleanFolderAsync();
            await MoveV2DataAsync();
        }

        _storageService.SetWorkingDirectory(_workDir);
    }

    /// <summary>
    /// 把文件夹内的所有数据打包成zip.
    /// </summary>
    /// <returns></returns>
    private async Task PackDataAsync()
    {
        await Task.Run(() =>
        {
            var zipPath = Path.Combine(Path.GetDirectoryName(_workDir)!, "v1_backup.zip");
            if (File.Exists(zipPath))
            {
                File.Delete(zipPath);
            }

            ZipFile.CreateFromDirectory(_workDir, zipPath, CompressionLevel.Fastest, false);
            File.Move(zipPath, Path.Combine(_workDir, "v1_backup.zip"));

            var v2TempDir = Path.Combine(_workDir, "v2_temp");
            if (!Directory.Exists(v2TempDir))
            {
                Directory.CreateDirectory(v2TempDir);
            }
        });
    }

    private async Task CleanFolderAsync()
    {
        await Task.Run(() =>
        {
            // Remove all files and folders in workDir exclude "v1_backup.zip" and "v2_temp" folder.
            foreach (var file in Directory.GetFiles(_workDir))
            {
                if (Path.GetFileName(file) != "v1_backup.zip")
                {
                    File.Delete(file);
                }
            }

            foreach (var dir in Directory.GetDirectories(_workDir))
            {
                if (Path.GetFileName(dir) != "v2_temp")
                {
                    Directory.Delete(dir, true);
                }
            }
        });
    }

    private async Task MoveV2DataAsync()
    {
        // move files and folder from v2_temp folder to workDir folder
        await Task.Run(() =>
        {
            foreach (var file in Directory.GetFiles(Path.Combine(_workDir, "v2_temp")))
            {
                File.Move(file, Path.Combine(_workDir, Path.GetFileName(file)));
            }

            foreach (var dir in Directory.GetDirectories(Path.Combine(_workDir, "v2_temp")))
            {
                Directory.Move(dir, Path.Combine(_workDir, Path.GetFileName(dir)));
            }

            Directory.Delete(Path.Combine(_workDir, "v2_temp"), true);
        });
    }

    private async Task MigrateSecretDataAsync()
    {
        using var secretDbContextV1 = new Context.SecretDbContext(_secretDbPath);
        var metadata = secretDbContextV1.Metadata.ToList();

        // Azure Open AI Chat
        if (metadata.Any(p => p.Id == "AzureOpenAIAccessKey" && !string.IsNullOrEmpty(p.Value)))
        {
            var aoaiConfig = new AzureOpenAIChatConfig
            {
                Key = metadata.First(p => p.Id == "AzureOpenAIAccessKey").Value,
                Endpoint = metadata.First(p => p.Id == "AzureOpenAIEndpoint").Value,
            };

            var json = JsonSerializer.Serialize(aoaiConfig);

            var defaultModel = metadata.FirstOrDefault(p => p.Id == "DefaultAzureOpenAIChatModelName")?.Value;
            if (!string.IsNullOrEmpty(defaultModel))
            {
                aoaiConfig.CustomModels = new List<ChatModel>
                {
                    new ChatModel
                    {
                        Id = defaultModel,
                        Name = defaultModel,
                    }
                };
            }

            _preferChatProvider = ChatProviderType.AzureOpenAI;
            await _storageService.SetChatConfigAsync(ChatProviderType.AzureOpenAI, aoaiConfig ?? new(), JsonGenContext.Default.AzureOpenAIChatConfig);

            var drawAoaiConfig = new AzureOpenAIDrawConfig
            {
                Key = aoaiConfig.Key,
                Endpoint = aoaiConfig.Endpoint,
            };
            var audioAoaiConfig =new AzureOpenAIAudioConfig
            {
                Key = aoaiConfig.Key,
                Endpoint = aoaiConfig.Endpoint,
            };
            await _storageService.SetDrawConfigAsync(DrawProviderType.AzureOpenAI, drawAoaiConfig ?? new(), JsonGenContext.Default.AzureOpenAIDrawConfig);
            await _storageService.SetAudioConfigAsync(AudioProviderType.AzureOpenAI, audioAoaiConfig ?? new(), JsonGenContext.Default.AzureOpenAIAudioConfig);
        }

        // Open AI Chat
        if (metadata.Any(p => p.Id == "OpenAIAccessKey" && !string.IsNullOrEmpty(p.Value)))
        {
            var oaiConfig = new OpenAIChatConfig
            {
                Key = metadata.First(p => p.Id == "OpenAIAccessKey").Value,
                Endpoint = metadata.First(p => p.Id == "OpenAICustomEndpoint").Value,
                OrganizationId = metadata.First(p => p.Id == "OpenAIOrganization").Value,
            };

            var drawOaiConfig = new OpenAIDrawConfig
            {
                Key = oaiConfig.Key,
                Endpoint = oaiConfig.Endpoint,
                OrganizationId = oaiConfig.OrganizationId,
            };
            var audioOaiConfig = new OpenAIAudioConfig
            {
                Key = oaiConfig.Key,
                Endpoint = oaiConfig.Endpoint,
                OrganizationId = oaiConfig.OrganizationId,
            };

            await _storageService.SetChatConfigAsync(ChatProviderType.OpenAI, oaiConfig, JsonGenContext.Default.OpenAIChatConfig);
            await _storageService.SetDrawConfigAsync(DrawProviderType.OpenAI, drawOaiConfig, JsonGenContext.Default.OpenAIDrawConfig);
            await _storageService.SetAudioConfigAsync(AudioProviderType.OpenAI, audioOaiConfig, JsonGenContext.Default.OpenAIAudioConfig);
        }

        // Azure Speech
        if (metadata.Any(p => p.Id == "AzureSpeechKey" && !string.IsNullOrEmpty(p.Value)))
        {
            var azureSpeechConfig = new AzureAudioConfig
            {
                Key = metadata.First(p => p.Id == "AzureSpeechKey").Value,
                Region = metadata.First(p => p.Id == "AzureSpeechRegion").Value,
            };

            await _storageService.SetAudioConfigAsync(AudioProviderType.Azure, azureSpeechConfig, JsonGenContext.Default.AzureAudioConfig);
        }

        // Azure Translator
        if (metadata.Any(p => p.Id == "AzureTranslateKey" && !string.IsNullOrEmpty(p.Value)))
        {
            var azureTranslatorConfig = new AzureTranslateConfig
            {
                Key = metadata.First(p => p.Id == "AzureTranslateKey").Value,
                Region = metadata.First(p => p.Id == "AzureTranslateRegion").Value,
            };

            await _storageService.SetTranslateConfigAsync(TranslateProviderType.Azure, azureTranslatorConfig, JsonGenContext.Default.AzureTranslateConfig);
        }

        // Baidu Translator
        if (metadata.Any(p => p.Id == "BaiduTranslateAppKey" && !string.IsNullOrEmpty(p.Value)))
        {
            var baiduTranslatorConfig = new BaiduTranslateConfig
            {
                AppId = metadata.First(p => p.Id == "BaiduTranslateAppId").Value,
                Key = metadata.First(p => p.Id == "BaiduTranslateAppKey").Value,
            };

            await _storageService.SetTranslateConfigAsync(TranslateProviderType.Baidu, baiduTranslatorConfig, JsonGenContext.Default.BaiduTranslateConfig);
        }
    }

    private async Task MigrateChatDataAsync()
    {
        using var chatDbContextV1 = new Context.ChatDbContext(_chatDbPath);
        var chatSessions = chatDbContextV1.Sessions.Include(p => p.Messages).Include(p => p.Options).ToList();
        foreach (var session in chatSessions)
        {
            var instruction = string.Empty;
            if (session.Assistants?.Count != 0)
            {
                var assistant = chatDbContextV1.Assistants.FirstOrDefault(p => p.Id == session.Assistants!.First());
                instruction = assistant?.Instruction ?? string.Empty;
            }

            var messages = new List<RodelChat.Models.Client.ChatMessage>();
            if (session.Messages != null)
            {
                foreach (var message in session.Messages)
                {
                    if (message.Role == Models.ChatMessageRole.System)
                    {
                        continue;
                    }

                    messages.Add(new RodelChat.Models.Client.ChatMessage
                    {
                        ClientMessageType = RodelChat.Models.Constants.ClientMessageType.Normal,
                        Content = new List<RodelChat.Models.Client.ChatMessageContent>
                        {
                            new RodelChat.Models.Client.ChatMessageContent
                            {
                                Type = RodelChat.Models.Constants.ChatContentType.Text,
                                Text = message.Content ?? string.Empty,
                            }
                        },
                        Role = message.Role == Models.ChatMessageRole.User ? RodelChat.Models.Constants.MessageRole.User : RodelChat.Models.Constants.MessageRole.Assistant,
                        Time = message.Time,
                    });
                }
            }

            var newSession = new RodelChat.Models.Client.ChatSession
            {
                Id = session.Id!,
                Title = session.Title ?? string.Empty,
                SystemInstruction = instruction,
                UseStreamOutput = true,
                Messages = messages,
                Provider = _preferChatProvider,
            };

            await _storageService.AddOrUpdateChatSessionAsync(newSession);
        }
    }

    private async Task MigrateDrawDataAsync()
    {
        using var drawDbContextV1 = new Context.DrawDbContext(_drawDbPath);
        var drawSessions = drawDbContextV1.Images.ToList();
        foreach (var session in drawSessions)
        {
            var newSession = new RodelDraw.Models.Client.DrawSession
            {
                Id = session.Id!,
                Request = new RodelDraw.Models.Client.DrawRequest
                {
                    Size = $"{session.Width}x{session.Height}",
                    Prompt = session.Prompt ?? string.Empty,
                },
                Provider = RodelDraw.Models.Constants.ProviderType.OpenAI,
                Model = "dall-e-2",
                Time = session.Time,
            };

            var imageFile = Path.Combine(_workDir, session.Link!);
            var newImageFile = Path.Combine(_workDir, "v2_temp", "Draw", session.Id! + ".png");
            if (!Directory.Exists(Path.GetDirectoryName(newImageFile)))
            {
                Directory.CreateDirectory(Path.GetDirectoryName(newImageFile)!);
            }

            File.Move(imageFile, newImageFile, true);
            await _storageService.AddOrUpdateDrawSessionAsync(newSession, default);
        }
    }
}
